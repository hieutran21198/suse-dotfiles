snippet repository "repository"
	package $1

	var (
		_ trepo.$2 = &$2{}
	)

	// New$2 creates new $2 instance.
	func New$2(db *gorm.DB) *$2 {
		return &$2{
			db:      db,
			${3:Generic}: New${3:Generic}[model.$2](db),
		}
	}

	// $2 repository.
	type $2 struct {
		db *gorm.DB
		*${3:Generic}[model.$2]
	}

snippet trepository "type repository"
	package $1

	// $2 represents the $2 repository.
	type $2 interface {
		${3:Generic}[model.$2]
	}

snippet model "model"
	package model

	// $1 model.
	type $1 struct {
		Model
	}

snippet repoelement "init repo element"
	r.lazy(constants.$2Tbl, func() {
		r.$1 = New$2(r.db)
	})

	return r.$1

snippet handlerImpl "init handler"
	package $1

	var (
		_ t$2.Handler = &$3{}
	)

	// New$3 creates new $2.
	func New$3(svc t$2.Service) *$3 {
		return &$3{
			svc: svc,
		}
	}

	// $3 handler.
	type $3 struct {
		svc t$2.Service
	}

snippet rqrp "request response dto"
	type (
		// $1Request is the input data for the business logic of $1.
		$1Request struct {
		}

		// $1Response is the output data for the business logic of $1.
		$1Response struct {
		}
	)

snippet service "service template"
	package $1

	var (
		_ t$1.Service = &Service{}	
	)

	// New creates new instance of Service.
	func New() *Service {
		s := &Service{}

		return s
	}

	// Service represents the $1 service.
	type Service struct {

		//
	}
snippet typeservice "service type template"
	package t$1

	// Service represents the $1 service.
	type Service interface {
	}




snippet inout "input output dto"
	type (
		// $1Input.
		$1Input struct {
		}

		// $$1Output.
		$1Output struct {
		}
	)

snippet b_repo "repo"
	var (
		_ repo.$1s = (*$1s)(nil)
	)

	// $1s repository.
	type $1s struct {
		*Repo[model.$1]
	}

	// New$1s creates new $1s instance.
	func New$1s(db *gorm.DB) *$1s {
		return &$1s{NewRepo[model.$1](db)}
	}
